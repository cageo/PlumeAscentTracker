function [C_cell,W] = track_contourMtlb
% function uses Matlab's 'contour' built-in function to find plume contours
% 
% IMPORTANT: the tracked features in this function are named with the subscript '_mtlb',
%   in order to differenciate them from those tracked in 'track_plumePx.m'.
%   Features tracked in both functions: 
%       - plume TOP & CENTER coordinates, height (m), velocity, acceleration

% load_workspaceVar
% NB: because 'plumeTracker' is a function, it has its own workspace which is different than the 'base' workspace.
% => the function 'load_workspaceVar' does not load the variables from 'plumeTracker'.
% => way around it:

%--- LOAD workspace variables:
ws_base= evalin('caller','who');
varNames= ws_base;
for i= 1 : length(varNames)
    varVal = evalin('caller',varNames{i});    %evaluate variable named 'variables{i}' from workspace ('base')
    S.(varNames{i}) = varVal;
end
get_struct2var(S)
%---

%-- get CONTOUR plots at level 'plumeTemp_thresh'
h_figContour=figure;
if ~exist('plumeTemp_thresh','var'), plumeTemp_thresh=[]; end %if temperature filter not applied
C = contour(img2track,[plumeTemp_thresh plumeTemp_thresh],'color','b'); %see also 'imcontour' (only grayscale image?)
close(h_figContour) %close figure automatically generated by 'contour' function
% NB: C(1,:)=X coord; C(2,:)=Ycoord; each contour line (for a given T° thresh) are stacked next to one another in C, where 1st row=X; 2nd row=Y
% !!! Each contour line begins with a column that contains the value of the contour (i.e. plumeTemp_thresh) on 1st line, and the number of (x,y) vertices in the contour line on the second line

%-- find the columns containing contour value & vertice numbers
idx_nbVertices = 1;
nbVertices=[]; idxLastVertice=[];
idx_nbVertices=1;
while idx_nbVertices(end) < size(C,2)
    nbVertices(numel(nbVertices)+1) = C(2,idx_nbVertices(end));
    idxLastVertice(numel(nbVertices)+1) = idx_nbVertices(end) + nbVertices(end);
    
    idx_nbVertices(numel(nbVertices)+1) = idxLastVertice(end) +1;
end

%-- store each contour in cell array C_cell;
% and contours in specified image region (above ventY; left of leftLim4plume_px) in cell array W;
nbContours=numel(nbVertices);
C_cell=cell(1,nbContours);
W={};
for k=1:nbContours
    C_cell{k} = C(:,idx_nbVertices(k)+1:idxLastVertice(k+1));
    
    %- get points in specified image region (above ventY & left of leftLim4plume_px)
    if filter_imgRegion
        leftLim4plume_px = limH_px;
        [~,c] = find(C_cell{k}(2,:)<=ventY & C_cell{k}(1,:)<=leftLim4plume_px); %nb: 0,0 in image = top left pixel
    else
        [~,c] = find(C_cell{k}(2,:)<=ventY);
    end
    
    %- get contour parts identified as plume in cell array W
    if ~isempty(c),
        W{numel(W)+1} = C_cell{k}(:,c);
    end
end


%-- collect data
%-get largest closed contour (=plume)
sz = cell2mat(cellfun(@(x) size(x,2),W,'uniformOutput',0));
[~,largestContour_idx] = find(sz==max(sz));

%.case when plume found
if ~isempty(largestContour_idx)
    largestContour_xy = W{largestContour_idx};
    
    %-get plume TOP
    [~,top_idx]=find(largestContour_xy(2,:)==min(largestContour_xy(2,:)));
    plumeTop_xyContour = [largestContour_xy(1,top_idx); largestContour_xy(2,top_idx)];
    plumeTop_ceil4pxY = ceil( largestContour_xy(2,top_idx) );
    plumeTopHeight_m = sum( pxHeightMat_imgAx(plumeTop_ceil4pxY : ventY-1) ); %recall that pxHeightMat_imgAx(1)=px at imageTop & pxHeightMat_imgAx(end)=px at imageBottom
    
    %-get plume CENTER
    % NB1: plume center needs to be collected using Matlab contour function rather than home-made,
    % because we can track the plume center even if detached from vent.
    plumeBarycenter_xyContour = [mean(largestContour_xy(1,:)); mean(largestContour_xy(2,:))];
    plumeBarycenter_ceil4pxY = ceil(mean(largestContour_xy(2,:)));
    plumeBarycenterHeight_m = sum( pxHeightMat_imgAx(plumeBarycenter_ceil4pxY : ventY-1) ); %recall that pxHeightMat_imgAx(1)=px at imageTop & pxHeightMat_imgAx(end)=px at imageBottom
    %NB2: why ventY-1 & ceil4pxY? because to make it simpler to compute the height in meters, we suppose that the vent position, plumeCenter position, etc. are at the top of each pixel; hence we do not consider the pixel ventY in the sum(pxHeightMat_imgAx(...)) => sum(... :ventY-1).
    
    
    %-- store data
    %contour
    plumeInfo_contourXY_mtlb{idxLine,1} = W; %contour coordinates (W=cell array, each cell is a closed contour line which contains with 1stLine=Xcoord, 2ndLine=Ycoord)
    plumeInfo_largestContourXY_mtlb{idxLine,1} = largestContour_xy;
    
    %center
    plumeInfo_centerXY_mtlb{idxLine,1} = plumeBarycenter_xyContour; %plume barycenter
    plumeInfo_centerM_mtlb(idxLine,1) = plumeBarycenterHeight_m;
    plumeInfo_velocCenter_mtlb(idxLine,1) = plumeBarycenterHeight_m / (currentFrame/frameRate);
    plumeInfo_accelCenter_mtlb(idxLine,1) = plumeInfo_velocCenter_mtlb(idxLine,1) / (currentFrame/frameRate);
    
    %top
    plumeInfo_topXY_mtlb{idxLine,1} = plumeTop_xyContour; %plume top
    plumeInfo_topM_mtlb(idxLine,1) = plumeTopHeight_m;
    plumeInfo_velocTop_mtlb(idxLine,1) = plumeTopHeight_m / (currentFrame/frameRate);
    plumeInfo_accelTop_mtlb(idxLine,1) = plumeInfo_velocTop_mtlb(idxLine,1) / (currentFrame/frameRate);
    
    
%.case when plume NOT found
else
    %contour
    plumeInfo_contourXY_mtlb{idxLine,1} = [NaN;NaN];
    plumeInfo_largestContourXY_mtlb{idxLine,1} = [NaN;NaN];
    
    %center
    plumeInfo_centerXY_mtlb{idxLine,1} = [NaN,NaN];
    plumeInfo_centerM_mtlb(idxLine,1) = NaN;
    plumeInfo_velocCenter_mtlb(idxLine,1) = NaN;
    plumeInfo_accelCenter_mtlb(idxLine,1) = NaN;
    
    %top
    plumeInfo_topXY_mtlb{idxLine,1} = [NaN,NaN];
    plumeInfo_topM_mtlb(idxLine,1) = NaN;
    plumeInfo_velocTop_mtlb(idxLine,1) = NaN;
    plumeInfo_accelTop_mtlb(idxLine,1) = NaN;
end


%-- export variables whose names start with 'plumeInfo'
var_plumeInfo = who('plumeInfo*');
for i=1:numel(var_plumeInfo)
    assignin('caller',var_plumeInfo{i},eval(var_plumeInfo{i}));
end